import { InternalServerErrorException } from "@nestjs/common";

export class AIService {
    async generateSummary(content: string): Promise<string>{
        try{
          const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
            method: 'POST',
            headers: {
              Authorization: `Bearer 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`,
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              model: 'google/learnlm-1.5-pro-experimental:free', // Best for high-quality articles
              messages: [
              {
                role: 'user',
                content: [
                {
                type: 'text',
                text: `
                    Generate a consice medium summary for the given content
                  `
                  },
                {
                  type: 'text',
                 text: `${content}`
                }
                ],
              },
              ],
              response_format: {
              type: "json_schema",
              json_schema: {
                name: "article",
                strict: true,
                schema: {
                type: "object",
                properties: {
                  summary: { type: "text", description: "Medium summary of the article"}
                },
                required: ["summary"],
                additionalProperties: false,
                },
              },
              },
            }),
            });
            
            const data = await response.json();
          
            // 1️⃣ Check for API errors
            if (!response.ok) {
            throw new Error(`OpenRouter error: ${data.error?.message || 'Unknown error'}`);
            }
            
            // 2️⃣ Extract the content (now in JSON string format)
            const outputJsonString = data?.choices?.[0]?.message?.content;
            
            if (!outputJsonString) {
            throw new Error('No content generated by the model');
            }
            // 3️⃣ Parse the JSON string to object
            const article = JSON.parse(outputJsonString);
            console.log("Generated Article: ", article);
           return article?.summary;
        }catch(error){
            console.error('Error in summary generation: ', error.message);
            throw new InternalServerErrorException('Error in summary generation');
        }
    }

    async generateTags(content: string): Promise<string[]> {
        try {
          // Using a model specifically trained for keyword/tag extraction
          const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
            method: 'POST',
            headers: {
              Authorization: `Bearer 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`,
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              model: 'mistralai/mistral-7b-instruct:free', // Best for high-quality articles
              messages: [
              {
                role: 'user',
                content: [
                {
                type: 'text',
                text: `
                    From the following content, generate exactly 5 highly relevant, punchy tags. Each tag must be only 1 or 2 words — 
                    creative, memorable, and meaningful. Return only a JSON array of strings, no explanations.
                  `
                  },
                {
                  type: 'text',
                 text: `${content}`
                },
                ],
              },
              ],
              response_format: {
              type: "json_schema",
              json_schema: {
                name: "article",
                strict: true,
                schema: {
                type: "object",
                properties: {
                  "tags": {
                  "type": "array",
                  "items": { "type": "string" },
                  "description": "List of relevant tags"
                },
                required: ["tags"],
                additionalProperties: false,
                },
              },
              },
            }	
            }),
            });
            
            const data = await response.json();
          
            // 1️⃣ Check for API errors
            if (!response.ok) {
            throw new Error(`OpenRouter error: ${data.error?.message || 'Unknown error'}`);
            }
            console.log(data?.choices?.[0]?.message);
            // 2️⃣ Extract the content (now in JSON string format)
            const outputJsonString = data?.choices?.[0]?.message?.content;
            
            if (!outputJsonString) {
            throw new Error('No tags generated by the model');
            }
            
          
            // 3️⃣ Parse the JSON string to object
            const tags = JSON.parse(outputJsonString);
            console.log("Generated Article: ", tags);
            return tags;
        } catch (error) {
          console.error('Error in tag generation: ', error.message);
          throw new InternalServerErrorException('Error in tag generation');
        }
    }    

    async generateArticleFromImage(image_url: string){
      try{
        const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
          method: 'POST',
          headers: {
            Authorization: `Bearer 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`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: 'google/gemini-2.0-flash-001', // Best for high-quality articles
            messages: [
            {
              role: 'user',
              content: [
              {
              type: 'text',
              text: `
                  Write a highly engaging, well-researched, and innovative article of 800-1000 words based on the given image.
        
                  Please follow these guidelines:
        
                  1. **Title**: Catchy and SEO-friendly.
                  2. **Description**: 1-2 lines of description for the article
                  3. **Introduction**: Start with a hook — a question, surprising fact, or short story to draw the reader in.
                  4. **Main Content**: Write a single continuous body of informative content (no subheadings or bullet points). Ensure logical flow and depth while maintaining readability.
                  5. **Conclusion**: Summarize the key ideas and end with a thoughtful insight or question.
                  6. **Did You Know?**: Provide one unique, lesser-known fact related to the topic.
                  7. **Quote**: Provide a catchy quote reagarding the article
                  8. **Tone**: Professional yet conversational. Avoid using technical jargon unless explained.
                `
                },
              {
                type: 'image_url',
                image_url: {
                url: `${image_url}`,
                },
              },
              ],
            },
            ],
            response_format: {
            type: "json_schema",
            json_schema: {
              name: "article",
              strict: true,
              schema: {
              type: "object",
              properties: {
                title: { type: "string", description: "Catchy, SEO-optimized title" },
                description: { type: "string", description: "Short 1-2 lines for the article"},
                introduction: { type: "string", description: "Engaging opening paragraph" },
                content: {
                type: "text",
                description: "A continuous body of words that represents the content of the article"
                },
                conclusion: { type: "string", description: "Impactful summary" },
                did_you_know: { type: "string", description: "Surprising fact" },
                quote: { type: "string", description: "Catchy Quote"}
              },
              required: ["title", "description", "introduction", "content", "conclusion", "did_you_know", "quote"],
              additionalProperties: false,
              },
            },
            },
          }),
          });
          
          const data = await response.json();
        
          // 1️⃣ Check for API errors
          if (!response.ok) {
          throw new Error(`OpenRouter error: ${data.error?.message || 'Unknown error'}`);
          }
          
          // 2️⃣ Extract the content (now in JSON string format)
          const outputJsonString = data?.choices?.[0]?.message?.content;
          
          if (!outputJsonString) {
          throw new Error('No content generated by the model');
          }
          
          
          // 3️⃣ Parse the JSON string to object
          const article = JSON.parse(outputJsonString);
          console.log("Generated Article:", article);
          return article;
    }catch(error){
        console.error("Error in generating Article: ", error.message);
        throw new InternalServerErrorException("Failed to generate article using AI");
      }
    }
}